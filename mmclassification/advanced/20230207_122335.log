2023-02-07 12:23:35,599 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /data/apps/cuda/11.1
NVCC: Cuda compilation tools, release 11.1, V11.1.74
GCC: gcc (GCC) 7.3.0
PyTorch: 1.10.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0+cu111
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMClassification: 0.25.0+3d4f80d
------------------------------------------------------------

2023-02-07 12:23:35,601 - mmcls - INFO - Distributed training: False
2023-02-07 12:23:37,299 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='VisionTransformer',
        arch='b',
        img_size=224,
        patch_size=32,
        drop_rate=0.1,
        init_cfg=[
            dict(
                type='Kaiming',
                layer='Conv2d',
                mode='fan_in',
                nonlinearity='linear')
        ]),
    neck=None,
    head=dict(
        type='VisionTransformerClsHead',
        num_classes=4,
        in_channels=768,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, 5),
        hidden_dim=3072),
    train_cfg=dict(
        augments=dict(type='BatchMixup', alpha=0.2, num_classes=4, prob=1.0)))
policy_imagenet = [[{
    'type': 'Posterize',
    'bits': 4,
    'prob': 0.4
}, {
    'type': 'Rotate',
    'angle': 30.0,
    'prob': 0.6
}],
                   [{
                       'type': 'Solarize',
                       'thr': 113.77777777777777,
                       'prob': 0.6
                   }, {
                       'type': 'AutoContrast',
                       'prob': 0.6
                   }],
                   [{
                       'type': 'Equalize',
                       'prob': 0.8
                   }, {
                       'type': 'Equalize',
                       'prob': 0.6
                   }],
                   [{
                       'type': 'Posterize',
                       'bits': 5,
                       'prob': 0.6
                   }, {
                       'type': 'Posterize',
                       'bits': 5,
                       'prob': 0.6
                   }],
                   [{
                       'type': 'Equalize',
                       'prob': 0.4
                   }, {
                       'type': 'Solarize',
                       'thr': 142.22222222222223,
                       'prob': 0.2
                   }],
                   [{
                       'type': 'Equalize',
                       'prob': 0.4
                   }, {
                       'type': 'Rotate',
                       'angle': 26.666666666666668,
                       'prob': 0.8
                   }],
                   [{
                       'type': 'Solarize',
                       'thr': 170.66666666666666,
                       'prob': 0.6
                   }, {
                       'type': 'Equalize',
                       'prob': 0.6
                   }],
                   [{
                       'type': 'Posterize',
                       'bits': 6,
                       'prob': 0.8
                   }, {
                       'type': 'Equalize',
                       'prob': 1.0
                   }],
                   [{
                       'type': 'Rotate',
                       'angle': 10.0,
                       'prob': 0.2
                   }, {
                       'type': 'Solarize',
                       'thr': 28.444444444444443,
                       'prob': 0.6
                   }],
                   [{
                       'type': 'Equalize',
                       'prob': 0.6
                   }, {
                       'type': 'Posterize',
                       'bits': 5,
                       'prob': 0.4
                   }],
                   [{
                       'type': 'Rotate',
                       'angle': 26.666666666666668,
                       'prob': 0.8
                   }, {
                       'type': 'ColorTransform',
                       'magnitude': 0.0,
                       'prob': 0.4
                   }],
                   [{
                       'type': 'Rotate',
                       'angle': 30.0,
                       'prob': 0.4
                   }, {
                       'type': 'Equalize',
                       'prob': 0.6
                   }],
                   [{
                       'type': 'Equalize',
                       'prob': 0.0
                   }, {
                       'type': 'Equalize',
                       'prob': 0.8
                   }],
                   [{
                       'type': 'Invert',
                       'prob': 0.6
                   }, {
                       'type': 'Equalize',
                       'prob': 1.0
                   }],
                   [{
                       'type': 'ColorTransform',
                       'magnitude': 0.4,
                       'prob': 0.6
                   }, {
                       'type': 'Contrast',
                       'magnitude': 0.8,
                       'prob': 1.0
                   }],
                   [{
                       'type': 'Rotate',
                       'angle': 26.666666666666668,
                       'prob': 0.8
                   }, {
                       'type': 'ColorTransform',
                       'magnitude': 0.2,
                       'prob': 1.0
                   }],
                   [{
                       'type': 'ColorTransform',
                       'magnitude': 0.8,
                       'prob': 0.8
                   }, {
                       'type': 'Solarize',
                       'thr': 56.888888888888886,
                       'prob': 0.8
                   }],
                   [{
                       'type': 'Sharpness',
                       'magnitude': 0.7,
                       'prob': 0.4
                   }, {
                       'type': 'Invert',
                       'prob': 0.6
                   }],
                   [{
                       'type': 'Shear',
                       'magnitude': 0.16666666666666666,
                       'prob': 0.6,
                       'direction': 'horizontal'
                   }, {
                       'type': 'Equalize',
                       'prob': 1.0
                   }],
                   [{
                       'type': 'ColorTransform',
                       'magnitude': 0.0,
                       'prob': 0.4
                   }, {
                       'type': 'Equalize',
                       'prob': 0.6
                   }],
                   [{
                       'type': 'Equalize',
                       'prob': 0.4
                   }, {
                       'type': 'Solarize',
                       'thr': 142.22222222222223,
                       'prob': 0.2
                   }],
                   [{
                       'type': 'Solarize',
                       'thr': 113.77777777777777,
                       'prob': 0.6
                   }, {
                       'type': 'AutoContrast',
                       'prob': 0.6
                   }],
                   [{
                       'type': 'Invert',
                       'prob': 0.6
                   }, {
                       'type': 'Equalize',
                       'prob': 1.0
                   }],
                   [{
                       'type': 'ColorTransform',
                       'magnitude': 0.4,
                       'prob': 0.6
                   }, {
                       'type': 'Contrast',
                       'magnitude': 0.8,
                       'prob': 1.0
                   }],
                   [{
                       'type': 'Equalize',
                       'prob': 0.8
                   }, {
                       'type': 'Equalize',
                       'prob': 0.6
                   }]]
dataset_type = 'CustomDataset'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='RandomResizedCrop',
        size=224,
        backend='pillow',
        interpolation='bicubic'),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='AutoAugment',
        policies=[[{
            'type': 'Posterize',
            'bits': 4,
            'prob': 0.4
        }, {
            'type': 'Rotate',
            'angle': 30.0,
            'prob': 0.6
        }],
                  [{
                      'type': 'Solarize',
                      'thr': 113.77777777777777,
                      'prob': 0.6
                  }, {
                      'type': 'AutoContrast',
                      'prob': 0.6
                  }],
                  [{
                      'type': 'Equalize',
                      'prob': 0.8
                  }, {
                      'type': 'Equalize',
                      'prob': 0.6
                  }],
                  [{
                      'type': 'Posterize',
                      'bits': 5,
                      'prob': 0.6
                  }, {
                      'type': 'Posterize',
                      'bits': 5,
                      'prob': 0.6
                  }],
                  [{
                      'type': 'Equalize',
                      'prob': 0.4
                  }, {
                      'type': 'Solarize',
                      'thr': 142.22222222222223,
                      'prob': 0.2
                  }],
                  [{
                      'type': 'Equalize',
                      'prob': 0.4
                  }, {
                      'type': 'Rotate',
                      'angle': 26.666666666666668,
                      'prob': 0.8
                  }],
                  [{
                      'type': 'Solarize',
                      'thr': 170.66666666666666,
                      'prob': 0.6
                  }, {
                      'type': 'Equalize',
                      'prob': 0.6
                  }],
                  [{
                      'type': 'Posterize',
                      'bits': 6,
                      'prob': 0.8
                  }, {
                      'type': 'Equalize',
                      'prob': 1.0
                  }],
                  [{
                      'type': 'Rotate',
                      'angle': 10.0,
                      'prob': 0.2
                  }, {
                      'type': 'Solarize',
                      'thr': 28.444444444444443,
                      'prob': 0.6
                  }],
                  [{
                      'type': 'Equalize',
                      'prob': 0.6
                  }, {
                      'type': 'Posterize',
                      'bits': 5,
                      'prob': 0.4
                  }],
                  [{
                      'type': 'Rotate',
                      'angle': 26.666666666666668,
                      'prob': 0.8
                  }, {
                      'type': 'ColorTransform',
                      'magnitude': 0.0,
                      'prob': 0.4
                  }],
                  [{
                      'type': 'Rotate',
                      'angle': 30.0,
                      'prob': 0.4
                  }, {
                      'type': 'Equalize',
                      'prob': 0.6
                  }],
                  [{
                      'type': 'Equalize',
                      'prob': 0.0
                  }, {
                      'type': 'Equalize',
                      'prob': 0.8
                  }],
                  [{
                      'type': 'Invert',
                      'prob': 0.6
                  }, {
                      'type': 'Equalize',
                      'prob': 1.0
                  }],
                  [{
                      'type': 'ColorTransform',
                      'magnitude': 0.4,
                      'prob': 0.6
                  }, {
                      'type': 'Contrast',
                      'magnitude': 0.8,
                      'prob': 1.0
                  }],
                  [{
                      'type': 'Rotate',
                      'angle': 26.666666666666668,
                      'prob': 0.8
                  }, {
                      'type': 'ColorTransform',
                      'magnitude': 0.2,
                      'prob': 1.0
                  }],
                  [{
                      'type': 'ColorTransform',
                      'magnitude': 0.8,
                      'prob': 0.8
                  }, {
                      'type': 'Solarize',
                      'thr': 56.888888888888886,
                      'prob': 0.8
                  }],
                  [{
                      'type': 'Sharpness',
                      'magnitude': 0.7,
                      'prob': 0.4
                  }, {
                      'type': 'Invert',
                      'prob': 0.6
                  }],
                  [{
                      'type': 'Shear',
                      'magnitude': 0.16666666666666666,
                      'prob': 0.6,
                      'direction': 'horizontal'
                  }, {
                      'type': 'Equalize',
                      'prob': 1.0
                  }],
                  [{
                      'type': 'ColorTransform',
                      'magnitude': 0.0,
                      'prob': 0.4
                  }, {
                      'type': 'Equalize',
                      'prob': 0.6
                  }],
                  [{
                      'type': 'Equalize',
                      'prob': 0.4
                  }, {
                      'type': 'Solarize',
                      'thr': 142.22222222222223,
                      'prob': 0.2
                  }],
                  [{
                      'type': 'Solarize',
                      'thr': 113.77777777777777,
                      'prob': 0.6
                  }, {
                      'type': 'AutoContrast',
                      'prob': 0.6
                  }],
                  [{
                      'type': 'Invert',
                      'prob': 0.6
                  }, {
                      'type': 'Equalize',
                      'prob': 1.0
                  }],
                  [{
                      'type': 'ColorTransform',
                      'magnitude': 0.4,
                      'prob': 0.6
                  }, {
                      'type': 'Contrast',
                      'magnitude': 0.8,
                      'prob': 1.0
                  }],
                  [{
                      'type': 'Equalize',
                      'prob': 0.8
                  }, {
                      'type': 'Equalize',
                      'prob': 0.6
                  }]]),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='Resize',
        size=(256, -1),
        backend='pillow',
        interpolation='bicubic'),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=256,
    workers_per_gpu=4,
    train=dict(
        type='CustomDataset',
        data_prefix='data/dataset-bloods/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='RandomResizedCrop',
                size=224,
                backend='pillow',
                interpolation='bicubic'),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='AutoAugment',
                policies=[[{
                    'type': 'Posterize',
                    'bits': 4,
                    'prob': 0.4
                }, {
                    'type': 'Rotate',
                    'angle': 30.0,
                    'prob': 0.6
                }],
                          [{
                              'type': 'Solarize',
                              'thr': 113.77777777777777,
                              'prob': 0.6
                          }, {
                              'type': 'AutoContrast',
                              'prob': 0.6
                          }],
                          [{
                              'type': 'Equalize',
                              'prob': 0.8
                          }, {
                              'type': 'Equalize',
                              'prob': 0.6
                          }],
                          [{
                              'type': 'Posterize',
                              'bits': 5,
                              'prob': 0.6
                          }, {
                              'type': 'Posterize',
                              'bits': 5,
                              'prob': 0.6
                          }],
                          [{
                              'type': 'Equalize',
                              'prob': 0.4
                          }, {
                              'type': 'Solarize',
                              'thr': 142.22222222222223,
                              'prob': 0.2
                          }],
                          [{
                              'type': 'Equalize',
                              'prob': 0.4
                          }, {
                              'type': 'Rotate',
                              'angle': 26.666666666666668,
                              'prob': 0.8
                          }],
                          [{
                              'type': 'Solarize',
                              'thr': 170.66666666666666,
                              'prob': 0.6
                          }, {
                              'type': 'Equalize',
                              'prob': 0.6
                          }],
                          [{
                              'type': 'Posterize',
                              'bits': 6,
                              'prob': 0.8
                          }, {
                              'type': 'Equalize',
                              'prob': 1.0
                          }],
                          [{
                              'type': 'Rotate',
                              'angle': 10.0,
                              'prob': 0.2
                          }, {
                              'type': 'Solarize',
                              'thr': 28.444444444444443,
                              'prob': 0.6
                          }],
                          [{
                              'type': 'Equalize',
                              'prob': 0.6
                          }, {
                              'type': 'Posterize',
                              'bits': 5,
                              'prob': 0.4
                          }],
                          [{
                              'type': 'Rotate',
                              'angle': 26.666666666666668,
                              'prob': 0.8
                          }, {
                              'type': 'ColorTransform',
                              'magnitude': 0.0,
                              'prob': 0.4
                          }],
                          [{
                              'type': 'Rotate',
                              'angle': 30.0,
                              'prob': 0.4
                          }, {
                              'type': 'Equalize',
                              'prob': 0.6
                          }],
                          [{
                              'type': 'Equalize',
                              'prob': 0.0
                          }, {
                              'type': 'Equalize',
                              'prob': 0.8
                          }],
                          [{
                              'type': 'Invert',
                              'prob': 0.6
                          }, {
                              'type': 'Equalize',
                              'prob': 1.0
                          }],
                          [{
                              'type': 'ColorTransform',
                              'magnitude': 0.4,
                              'prob': 0.6
                          }, {
                              'type': 'Contrast',
                              'magnitude': 0.8,
                              'prob': 1.0
                          }],
                          [{
                              'type': 'Rotate',
                              'angle': 26.666666666666668,
                              'prob': 0.8
                          }, {
                              'type': 'ColorTransform',
                              'magnitude': 0.2,
                              'prob': 1.0
                          }],
                          [{
                              'type': 'ColorTransform',
                              'magnitude': 0.8,
                              'prob': 0.8
                          }, {
                              'type': 'Solarize',
                              'thr': 56.888888888888886,
                              'prob': 0.8
                          }],
                          [{
                              'type': 'Sharpness',
                              'magnitude': 0.7,
                              'prob': 0.4
                          }, {
                              'type': 'Invert',
                              'prob': 0.6
                          }],
                          [{
                              'type': 'Shear',
                              'magnitude': 0.16666666666666666,
                              'prob': 0.6,
                              'direction': 'horizontal'
                          }, {
                              'type': 'Equalize',
                              'prob': 1.0
                          }],
                          [{
                              'type': 'ColorTransform',
                              'magnitude': 0.0,
                              'prob': 0.4
                          }, {
                              'type': 'Equalize',
                              'prob': 0.6
                          }],
                          [{
                              'type': 'Equalize',
                              'prob': 0.4
                          }, {
                              'type': 'Solarize',
                              'thr': 142.22222222222223,
                              'prob': 0.2
                          }],
                          [{
                              'type': 'Solarize',
                              'thr': 113.77777777777777,
                              'prob': 0.6
                          }, {
                              'type': 'AutoContrast',
                              'prob': 0.6
                          }],
                          [{
                              'type': 'Invert',
                              'prob': 0.6
                          }, {
                              'type': 'Equalize',
                              'prob': 1.0
                          }],
                          [{
                              'type': 'ColorTransform',
                              'magnitude': 0.4,
                              'prob': 0.6
                          }, {
                              'type': 'Contrast',
                              'magnitude': 0.8,
                              'prob': 1.0
                          }],
                          [{
                              'type': 'Equalize',
                              'prob': 0.8
                          }, {
                              'type': 'Equalize',
                              'prob': 0.6
                          }]]),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file=None),
    val=dict(
        type='CustomDataset',
        data_prefix='data/dataset-bloods/val',
        ann_file=None,
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='Resize',
                size=(256, -1),
                backend='pillow',
                interpolation='bicubic'),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='CustomDataset',
        data_prefix='data/dataset-bloods/test',
        ann_file=None,
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='Resize',
                size=(256, -1),
                backend='pillow',
                interpolation='bicubic'),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(
    interval=1, metric='accuracy', metric_options=dict(topk=(1, )))
paramwise_cfg = dict(
    custom_keys=dict({
        '.cls_token': dict(decay_mult=0.0),
        '.pos_embed': dict(decay_mult=0.0)
    }))
optimizer = dict(
    type='AdamW',
    lr=0.003,
    weight_decay=0.3,
    paramwise_cfg=dict(
        custom_keys=dict({
            '.cls_token': dict(decay_mult=0.0),
            '.pos_embed': dict(decay_mult=0.0)
        })))
optimizer_config = dict(grad_clip=dict(max_norm=1.0))
lr_config = dict(
    policy='CosineAnnealing',
    min_lr=0,
    warmup='linear',
    warmup_iters=10000,
    warmup_ratio=0.0001)
runner = dict(type='EpochBasedRunner', max_epochs=30)
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'checkpoints/vit-base-p16_3rdparty_pt-64xb64_in1k-224_20210928-02284250.pth'
resume_from = None
workflow = [('train', 1)]
work_dir = 'work_dirs/vit/vit-base-p16/vit-base-p16_pt-1xb256_bloods-224/'
gpu_ids = [0]

2023-02-07 12:23:37,301 - mmcls - INFO - Set random seed to 616368890, deterministic: False
2023-02-07 12:23:37,774 - mmcls - INFO - initialize VisionTransformer with init_cfg [{'type': 'Kaiming', 'layer': 'Conv2d', 'mode': 'fan_in', 'nonlinearity': 'linear'}]
2023-02-07 12:23:38,294 - mmcls - INFO - initialize VisionTransformerClsHead with init_cfg {'type': 'Constant', 'layer': 'Linear', 'val': 0}
Name of parameter - Initialization information

backbone.cls_token - torch.Size([1, 1, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.pos_embed - torch.Size([1, 50, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

backbone.patch_embed.projection.weight - torch.Size([768, 3, 32, 32]): 
KaimingInit: a=0, mode=fan_in, nonlinearity=linear, distribution =normal, bias=0 

backbone.patch_embed.projection.bias - torch.Size([768]): 
KaimingInit: a=0, mode=fan_in, nonlinearity=linear, distribution =normal, bias=0 

backbone.layers.0.ln1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.ln1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.attn.qkv.weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.attn.proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.ln2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.ln2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.0.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.0.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.0.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.1.ln1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.ln1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.attn.qkv.weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.attn.proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.ln2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.ln2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.1.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.1.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.1.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.2.ln1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.ln1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.attn.qkv.weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.attn.proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.ln2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.ln2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.2.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.2.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.2.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.3.ln1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.ln1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.attn.qkv.weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.attn.proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.ln2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.ln2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.3.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.3.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.3.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.4.ln1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.ln1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.attn.qkv.weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.attn.proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.ln2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.ln2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.4.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.4.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.4.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.5.ln1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.ln1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.attn.qkv.weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.attn.proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.ln2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.ln2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.5.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.5.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.5.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.6.ln1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.6.ln1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.6.attn.qkv.weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.6.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.6.attn.proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.6.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.6.ln2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.6.ln2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.6.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.6.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.6.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.6.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.7.ln1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.7.ln1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.7.attn.qkv.weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.7.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.7.attn.proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.7.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.7.ln2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.7.ln2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.7.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.7.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.7.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.7.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.8.ln1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.8.ln1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.8.attn.qkv.weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.8.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.8.attn.proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.8.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.8.ln2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.8.ln2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.8.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.8.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.8.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.8.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.9.ln1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.9.ln1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.9.attn.qkv.weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.9.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.9.attn.proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.9.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.9.ln2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.9.ln2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.9.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.9.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.9.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.9.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.10.ln1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.10.ln1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.10.attn.qkv.weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.10.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.10.attn.proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.10.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.10.ln2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.10.ln2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.10.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.10.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.10.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.10.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.11.ln1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.11.ln1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.11.attn.qkv.weight - torch.Size([2304, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.11.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.11.attn.proj.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.11.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.11.ln2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.11.ln2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.11.ffn.layers.0.0.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.11.ffn.layers.0.0.bias - torch.Size([3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.11.ffn.layers.1.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.layers.11.ffn.layers.1.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in TransformerEncoderLayer  

backbone.ln1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.ln1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.layers.pre_logits.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformerClsHead  

head.layers.pre_logits.bias - torch.Size([3072]): 
ConstantInit: val=0, bias=0 

head.layers.head.weight - torch.Size([4, 3072]): 
ConstantInit: val=0, bias=0 

head.layers.head.bias - torch.Size([4]): 
ConstantInit: val=0, bias=0 
2023-02-07 12:23:51,332 - mmcls - INFO - load checkpoint from local path: checkpoints/vit-base-p16_3rdparty_pt-64xb64_in1k-224_20210928-02284250.pth
2023-02-07 12:23:51,740 - mmcls - INFO - Resize the pos_embed shape from torch.Size([1, 197, 768]) to torch.Size([1, 50, 768]).
2023-02-07 12:23:52,007 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for backbone.patch_embed.projection.weight: copying a param with shape torch.Size([768, 3, 16, 16]) from checkpoint, the shape in current model is torch.Size([768, 3, 32, 32]).
missing keys in source state_dict: head.layers.pre_logits.weight, head.layers.pre_logits.bias, head.layers.head.weight, head.layers.head.bias

2023-02-07 12:23:52,007 - mmcls - INFO - Start running, host: scz0a21@g0004, work_dir: /data/run01/scz0a21/MMLab-learn/mmclassification/work_dirs/vit/vit-base-p16/vit-base-p16_pt-1xb256_bloods-224
2023-02-07 12:23:52,007 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-07 12:23:52,008 - mmcls - INFO - workflow: [('train', 1)], max: 30 epochs
2023-02-07 12:23:52,008 - mmcls - INFO - Checkpoints will be saved to /data/run01/scz0a21/MMLab-learn/mmclassification/work_dirs/vit/vit-base-p16/vit-base-p16_pt-1xb256_bloods-224 by HardDiskBackend.
2023-02-07 12:24:20,174 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-07 12:24:28,394 - mmcls - INFO - Epoch(val) [1][10]	accuracy_top-1: 32.4487
2023-02-07 12:24:45,950 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-07 12:24:50,310 - mmcls - INFO - Epoch(val) [2][10]	accuracy_top-1: 34.3386
2023-02-07 12:25:07,794 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-07 12:25:12,211 - mmcls - INFO - Epoch(val) [3][10]	accuracy_top-1: 52.1512
2023-02-07 12:25:29,656 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-07 12:25:33,995 - mmcls - INFO - Epoch(val) [4][10]	accuracy_top-1: 58.0619
2023-02-07 12:25:51,500 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-07 12:25:55,838 - mmcls - INFO - Epoch(val) [5][10]	accuracy_top-1: 65.1789
2023-02-07 12:26:13,479 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-07 12:26:17,819 - mmcls - INFO - Epoch(val) [6][10]	accuracy_top-1: 76.8798
2023-02-07 12:26:35,331 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-07 12:26:39,708 - mmcls - INFO - Epoch(val) [7][10]	accuracy_top-1: 72.2155
2023-02-07 12:26:57,252 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-07 12:27:01,624 - mmcls - INFO - Epoch(val) [8][10]	accuracy_top-1: 79.5738
2023-02-07 12:27:19,199 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-07 12:27:23,585 - mmcls - INFO - Epoch(val) [9][10]	accuracy_top-1: 76.9602
2023-02-07 12:27:41,081 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-07 12:27:45,451 - mmcls - INFO - Epoch(val) [10][10]	accuracy_top-1: 72.0949
2023-02-07 12:28:03,075 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-07 12:28:07,404 - mmcls - INFO - Epoch(val) [11][10]	accuracy_top-1: 79.8955
2023-02-07 12:28:25,066 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-07 12:28:29,429 - mmcls - INFO - Epoch(val) [12][10]	accuracy_top-1: 80.6192
2023-02-07 12:28:47,106 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-07 12:28:51,488 - mmcls - INFO - Epoch(val) [13][10]	accuracy_top-1: 77.5231
2023-02-07 12:29:09,199 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-07 12:29:13,543 - mmcls - INFO - Epoch(val) [14][10]	accuracy_top-1: 73.3816
2023-02-07 12:29:31,072 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-07 12:29:35,540 - mmcls - INFO - Epoch(val) [15][10]	accuracy_top-1: 77.7644
2023-02-07 12:29:53,226 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-07 12:29:57,569 - mmcls - INFO - Epoch(val) [16][10]	accuracy_top-1: 80.7399
2023-02-07 12:30:15,249 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-07 12:30:19,612 - mmcls - INFO - Epoch(val) [17][10]	accuracy_top-1: 82.3482
2023-02-07 12:30:37,263 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-07 12:30:41,613 - mmcls - INFO - Epoch(val) [18][10]	accuracy_top-1: 81.4636
2023-02-07 12:30:59,215 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-07 12:31:03,572 - mmcls - INFO - Epoch(val) [19][10]	accuracy_top-1: 81.0615
2023-02-07 12:31:21,181 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-07 12:31:25,553 - mmcls - INFO - Epoch(val) [20][10]	accuracy_top-1: 78.4881
2023-02-07 12:31:43,082 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-07 12:31:47,419 - mmcls - INFO - Epoch(val) [21][10]	accuracy_top-1: 80.3780
2023-02-07 12:32:05,025 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-07 12:32:09,379 - mmcls - INFO - Epoch(val) [22][10]	accuracy_top-1: 83.1122
2023-02-07 12:32:26,954 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-07 12:32:31,349 - mmcls - INFO - Epoch(val) [23][10]	accuracy_top-1: 83.5143
2023-02-07 12:32:48,937 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-07 12:32:53,273 - mmcls - INFO - Epoch(val) [24][10]	accuracy_top-1: 81.9059
2023-02-07 12:33:10,801 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-07 12:33:15,175 - mmcls - INFO - Epoch(val) [25][10]	accuracy_top-1: 81.3028
2023-02-07 12:33:32,692 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-07 12:33:37,045 - mmcls - INFO - Epoch(val) [26][10]	accuracy_top-1: 82.6297
2023-02-07 12:33:54,556 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-07 12:33:58,896 - mmcls - INFO - Epoch(val) [27][10]	accuracy_top-1: 82.9513
2023-02-07 12:34:16,401 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-07 12:34:20,781 - mmcls - INFO - Epoch(val) [28][10]	accuracy_top-1: 82.7503
2023-02-07 12:34:38,423 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-07 12:34:42,768 - mmcls - INFO - Epoch(val) [29][10]	accuracy_top-1: 83.1926
2023-02-07 12:35:00,367 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-07 12:35:04,726 - mmcls - INFO - Epoch(val) [30][10]	accuracy_top-1: 83.3534

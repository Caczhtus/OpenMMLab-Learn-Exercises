{"env_info": "sys.platform: linux\nPython: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.3, V11.3.109\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.10.2+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.3+cu113\nOpenCV: 4.5.3\nMMCV: 1.5.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.28.1+", "config": "checkpoint_config = dict(interval=2, max_keep_ckpts=2)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'yolov3_mobilenetv2_mstrain-416_300e_coco_20210718_010823-f68a07b3.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=192)\nmodel = dict(\n    type='YOLOV3',\n    backbone=dict(\n        type='MobileNetV2',\n        out_indices=(2, 4, 6),\n        act_cfg=dict(type='LeakyReLU', negative_slope=0.1),\n        init_cfg=dict(\n            type='Pretrained', checkpoint='open-mmlab://mmdet/mobilenet_v2')),\n    neck=dict(\n        type='YOLOV3Neck',\n        num_scales=3,\n        in_channels=[320, 96, 32],\n        out_channels=[96, 96, 96]),\n    bbox_head=dict(\n        type='YOLOV3Head',\n        num_classes=1,\n        in_channels=[96, 96, 96],\n        out_channels=[96, 96, 96],\n        anchor_generator=dict(\n            type='YOLOAnchorGenerator',\n            base_sizes=[[(116, 90), (156, 198), (373, 326)],\n                        [(30, 61), (62, 45), (59, 119)],\n                        [(10, 13), (16, 30), (33, 23)]],\n            strides=[32, 16, 8]),\n        bbox_coder=dict(type='YOLOBBoxCoder'),\n        featmap_strides=[32, 16, 8],\n        loss_cls=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=1.0,\n            reduction='sum'),\n        loss_conf=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=1.0,\n            reduction='sum'),\n        loss_xy=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=2.0,\n            reduction='sum'),\n        loss_wh=dict(type='MSELoss', loss_weight=2.0, reduction='sum')),\n    train_cfg=dict(\n        assigner=dict(\n            type='GridAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0)),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        conf_thr=0.005,\n        nms=dict(type='nms', iou_threshold=0.45),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Expand',\n        mean=[123.675, 116.28, 103.53],\n        to_rgb=True,\n        ratio_range=(1, 2)),\n    dict(\n        type='MinIoURandomCrop',\n        min_ious=(0.4, 0.5, 0.6, 0.7, 0.8, 0.9),\n        min_crop_size=0.3),\n    dict(\n        type='Resize',\n        img_scale=[(320, 320), (416, 416)],\n        multiscale_mode='range',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(416, 416),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=4,\n    train=dict(\n        type='RepeatDataset',\n        times=10,\n        dataset=dict(\n            type='CocoDataset',\n            ann_file=\n            '/openbayes/input/output0/balloon/train_via_region_data.json',\n            img_prefix='/openbayes/input/input0/balloon/train/',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations', with_bbox=True),\n                dict(\n                    type='Expand',\n                    mean=[123.675, 116.28, 103.53],\n                    to_rgb=True,\n                    ratio_range=(1, 2)),\n                dict(\n                    type='MinIoURandomCrop',\n                    min_ious=(0.4, 0.5, 0.6, 0.7, 0.8, 0.9),\n                    min_crop_size=0.3),\n                dict(\n                    type='Resize',\n                    img_scale=[(320, 320), (416, 416)],\n                    multiscale_mode='range',\n                    keep_ratio=True),\n                dict(type='RandomFlip', flip_ratio=0.5),\n                dict(type='PhotoMetricDistortion'),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size_divisor=32),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n            ],\n            classes=('balloon', ))),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/openbayes/input/output0/balloon/val_via_region_data.json',\n        img_prefix='/openbayes/input/input0/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(416, 416),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/openbayes/input/output0/balloon/val_via_region_data.json',\n        img_prefix='/openbayes/input/input0/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(416, 416),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\noptimizer = dict(type='SGD', lr=0.003, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=4000,\n    warmup_ratio=0.0001,\n    step=[24, 28])\nrunner = dict(type='EpochBasedRunner', max_epochs=30)\nevaluation = dict(interval=1, metric=['bbox'])\nfind_unused_parameters = True\nclasses = ('balloon', )\nwork_dir = 'work_dirs/yolov3/yolov3_mobilenetv2_mstrain-416_30e_balloon/'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 815861825, "exp_name": "yolov3_mobilenetv2_mstrain-416_30e_balloon.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 4e-05, "memory": 1856, "data_time": 0.07424, "loss_cls": 182.06734, "loss_conf": 438.73764, "loss_xy": 112.53292, "loss_wh": 15.54922, "loss": 748.88711, "grad_norm": 601.7423, "time": 0.14825}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 6e-05, "bbox_mAP": 0.0229, "bbox_mAP_50": 0.0594, "bbox_mAP_75": 0.0, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0302, "bbox_mAP_copypaste": "0.0229 0.0594 0.0000 0.0000 0.0000 0.0302"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 9e-05, "memory": 1856, "data_time": 0.08372, "loss_cls": 100.08479, "loss_conf": 283.58007, "loss_xy": 113.80884, "loss_wh": 8.79351, "loss": 506.26721, "grad_norm": 462.39871, "time": 0.1565}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00012, "bbox_mAP": 0.16, "bbox_mAP_50": 0.489, "bbox_mAP_75": 0.0436, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.2183, "bbox_mAP_copypaste": "0.1600 0.4890 0.0436 0.0000 0.0000 0.2183"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00015, "memory": 1856, "data_time": 0.07529, "loss_cls": 15.68666, "loss_conf": 159.89358, "loss_xy": 109.95824, "loss_wh": 6.50848, "loss": 292.04696, "grad_norm": 500.92172, "time": 0.1453}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.00017, "bbox_mAP": 0.2788, "bbox_mAP_50": 0.6119, "bbox_mAP_75": 0.1051, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.3796, "bbox_mAP_copypaste": "0.2788 0.6119 0.1051 0.0000 0.0000 0.3796"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00021, "memory": 1856, "data_time": 0.08101, "loss_cls": 7.02368, "loss_conf": 128.19304, "loss_xy": 121.47054, "loss_wh": 6.46084, "loss": 263.14811, "grad_norm": 498.43116, "time": 0.15074}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00023, "bbox_mAP": 0.3003, "bbox_mAP_50": 0.6562, "bbox_mAP_75": 0.1878, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0051, "bbox_mAP_l": 0.4074, "bbox_mAP_copypaste": "0.3003 0.6562 0.1878 0.0000 0.0051 0.4074"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.00027, "memory": 1856, "data_time": 0.07433, "loss_cls": 3.55076, "loss_conf": 85.73658, "loss_xy": 94.49482, "loss_wh": 4.86713, "loss": 188.64928, "grad_norm": 447.64526, "time": 0.14515}
